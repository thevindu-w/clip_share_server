name: Create-Release
run-name: Create Release ${{github.ref_name}}

on:
  push:
    tags:
    - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  Checks:
    runs-on: ubuntu-latest
    timeout-minutes: 3

    steps:
    - name: Check out repository code
      uses: actions/checkout@v4

    - name: Set version
      run: |
        echo VERSION="$(echo '${{github.ref_name}}' | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')" >> $GITHUB_ENV

    - name: Check resources version
      run: |
        cd src/res
        major="$(grep MAJOR version | grep -oE '[0-9]+')"
        minor="$(grep MINOR version | grep -oE '[0-9]+')"
        patch="$(grep PATCH version | grep -oE '[0-9]+')"
        test "${major}.${minor}.${patch}" = "${{env.VERSION}}"

    - name: Check release_notes.md version
      run: |
        for v in $(grep -oE '[0-9]+\.[0-9]+\.[0-9]+' .github/workflows/resources/release_notes.md); do \
        grep -qF "${{env.VERSION}}" <<<"$v"; \
        done

  Build-and-Test:
    uses: ./.github/workflows/build-test.yml
    permissions:
      contents: write
      pull-requests: write
      security-events: write
    needs: Checks

  Linux-x86_64:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs:
    - Checks
    - Build-and-Test

    steps:
    - name: Check out repository code
      uses: actions/checkout@v4

    - name: Set version
      run: |
        version="$(echo '${{github.ref_name}}' | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')"
        archive="clip_share_server-${version}-linux-x86_64"
        echo ARCHIVE_NAME_NO_EXT="${archive}" >> $GITHUB_ENV
        echo ARCHIVE_NAME="${archive}.tar.gz" >> $GITHUB_ENV

    - name: Build on Ubuntu 18
      run: |
        docker buildx build -t clipshare:ubuntu18 -f docker/release/Dockerfile \
        --build-arg 'DISTRO=ubuntu' --build-arg 'VERSION=bionic' .

    - name: Build on Ubuntu 20
      run: |
        docker buildx build -t clipshare:ubuntu20 -f docker/release/Dockerfile \
        --build-arg 'DISTRO=ubuntu' --build-arg 'VERSION=focal' .

    - name: Build on Ubuntu 22
      run: |
        docker buildx build -t clipshare:ubuntu22 -f docker/release/Dockerfile \
        --build-arg 'DISTRO=ubuntu' --build-arg 'VERSION=jammy' .

    - name: Build on Ubuntu 24
      run: |
        docker buildx build -t clipshare:ubuntu24 -f docker/release/Dockerfile \
        --build-arg 'DISTRO=ubuntu' --build-arg 'VERSION=noble' .

    - name: Build on Arch Linux
      run: docker buildx build -t clipshare:arch -f docker/release/Dockerfile --build-arg 'DISTRO=arch' .

    - name: Build on Fedora
      run: docker buildx build -t clipshare:fedora -f docker/release/Dockerfile --build-arg 'DISTRO=arch' .

    - name: Copy binaries
      run: |
        mkdir dist
        chmod 777 dist
        docker run -v './dist:/home/user/src/dist' clipshare:ubuntu18
        docker run -v './dist:/home/user/src/dist' clipshare:ubuntu20
        docker run -v './dist:/home/user/src/dist' clipshare:ubuntu22
        docker run -v './dist:/home/user/src/dist' clipshare:ubuntu24
        docker run -v './dist:/home/user/src/dist' clipshare:arch
        docker run -v './dist:/home/user/src/dist' clipshare:fedora
        [ -f helper_tools/install-linux.sh ] && cp helper_tools/install-linux.sh dist/
        sudo chmod +x dist/*
        cd dist
        sha256sum -b * >SHA2-256SUM
        cd ..
        mv dist "${{env.ARCHIVE_NAME_NO_EXT}}"
        tar -cf - --sort=name --owner=root:0 --group=root:0 --no-same-owner "${{env.ARCHIVE_NAME_NO_EXT}}" | \
        gzip -9 >"${{env.ARCHIVE_NAME}}"

    - name: Upload Linux version
      uses: actions/upload-artifact@v4
      with:
        name: "${{env.ARCHIVE_NAME}}"
        path: "${{env.ARCHIVE_NAME}}"
        retention-days: 3
        if-no-files-found: error
        compression-level: 0

  Linux-ARM64:
    runs-on: ubuntu-24.04-arm
    timeout-minutes: 20
    needs:
    - Checks
    - Build-and-Test

    steps:
    - name: Check out repository code
      uses: actions/checkout@v4

    - name: Set version
      run: |
        version="$(echo '${{github.ref_name}}' | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')"
        archive="clip_share_server-${version}-linux-arm64"
        echo ARCHIVE_NAME_NO_EXT="${archive}" >> $GITHUB_ENV
        echo ARCHIVE_NAME="${archive}.tar.gz" >> $GITHUB_ENV

    - name: Build
      run: docker buildx build -t clipshare -f docker/release/Dockerfile --build-arg 'DISTRO=debian' .

    - name: Copy binaries
      run: |
        mkdir dist
        chmod 777 dist
        docker run -v './dist:/home/user/src/dist' clipshare
        [ -f helper_tools/install-linux.sh ] && cp helper_tools/install-linux.sh dist/
        sudo chmod +x dist/*
        cd dist
        sha256sum -b * >SHA2-256SUM
        cd ..
        mv dist "${{env.ARCHIVE_NAME_NO_EXT}}"
        tar -cf - --sort=name --owner=root:0 --group=root:0 --no-same-owner "${{env.ARCHIVE_NAME_NO_EXT}}" | \
        gzip -9 >"${{env.ARCHIVE_NAME}}"

    - name: Upload Linux version
      uses: actions/upload-artifact@v4
      with:
        name: "${{env.ARCHIVE_NAME}}"
        path: "${{env.ARCHIVE_NAME}}"
        retention-days: 3
        if-no-files-found: error
        compression-level: 0

  Windows:
    runs-on: windows-latest
    timeout-minutes: 10
    needs:
    - Checks
    - Build-and-Test

    strategy:
      matrix:
        target:
        - arch: x86_64
          env: x86_64
          sys: MINGW64
        - arch: x86
          env: i686
          sys: MINGW32

    defaults:
      run:
        shell: msys2 {0}

    steps:
    - uses: msys2/setup-msys2@v2
      with:
        msystem: ${{matrix.target.sys}}
        update: false
        install: >-
          mingw-w64-${{matrix.target.env}}-gcc
          mingw-w64-${{matrix.target.env}}-openssl
          mingw-w64-${{matrix.target.env}}-libpng
          mingw-w64-${{matrix.target.env}}-libunistring
          make
          zip

    - name: Check out repository code
      uses: actions/checkout@v4

    - name: Set variables
      run: |
        version="$(echo '${{github.ref_name}}' | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')"
        echo VERSION="$version" >> $GITHUB_ENV
        echo FILE_NAME="clip_share.exe" >> $GITHUB_ENV
        echo FILE_NAME_NO_SSL="clip_share_no_ssl.exe" >> $GITHUB_ENV
        suffix="${version}-windows-${{matrix.target.arch}}.zip"
        echo ARCHIVE_NAME="clip_share_server-${suffix}" >> $GITHUB_ENV
        echo ARCHIVE_NAME_NO_SSL="clip_share_server-no_ssl-${suffix}" >> $GITHUB_ENV
        echo INSTALLER_NAME="install-windows.bat" >> $GITHUB_ENV

    - name: Build
      run: |
        make ARCH=${{matrix.target.arch}}
        mkdir dist
        mv clip_share*.exe "dist/${{env.FILE_NAME}}"
        [ -f helper_tools/install-windows.bat ] && cp helper_tools/install-windows.bat dist/
        cd dist
        zip -9 "../${{env.ARCHIVE_NAME}}" *

    - name: Build no_ssl
      run: |
        make clean
        make ARCH=${{matrix.target.arch}} no_ssl
        mkdir dist_no_ssl
        mv clip_share_no_ssl*.exe "dist_no_ssl/${{env.FILE_NAME_NO_SSL}}"
        [ -f helper_tools/install-windows.bat ] && cp helper_tools/install-windows.bat dist_no_ssl/
        cd dist_no_ssl
        zip -9 "../${{env.ARCHIVE_NAME_NO_SSL}}" *

    - name: Upload Windows version
      uses: actions/upload-artifact@v4
      with:
        name: "${{env.ARCHIVE_NAME}}"
        path: "${{env.ARCHIVE_NAME}}"
        retention-days: 3
        if-no-files-found: error
        compression-level: 9

    - name: Upload Windows no-ssl version
      uses: actions/upload-artifact@v4
      with:
        name: "${{env.ARCHIVE_NAME_NO_SSL}}"
        path: "${{env.ARCHIVE_NAME_NO_SSL}}"
        retention-days: 3
        if-no-files-found: error
        compression-level: 9

    - name: Create online installer
      if: ${{ matrix.target.arch == 'x86_64' }}
      run: |
        cd helper_tools
        sed -i "s/VERSION_DEFAULT =$/VERSION_DEFAULT = '${{env.VERSION}}'/" install-online-windows.ps1
        powershell -ExecutionPolicy bypass ./ps2bat.ps1
        mv install.bat "../${{env.INSTALLER_NAME}}"

    - name: Upload online installer
      if: ${{ matrix.target.arch == 'x86_64' }}
      uses: actions/upload-artifact@v4
      with:
        name: "${{env.INSTALLER_NAME}}"
        path: "${{env.INSTALLER_NAME}}"
        retention-days: 3
        if-no-files-found: error
        compression-level: 6

  macOS:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    needs:
    - Checks
    - Build-and-Test

    strategy:
      matrix:
        os:
        - macos-latest
        - macos-13

    steps:
    - name: Install dependencies
      run: brew install openssl@3 libpng libunistring

    - name: Check out repository code
      uses: actions/checkout@v4

    - name: Set version
      run: |
        arch_suffix="$(uname -a | grep -q x86_64 && echo x86_64 || echo arm64)"
        filename="clip_share-${arch_suffix}"
        echo FILE_NAME="$filename" >> $GITHUB_ENV

    - name: Build
      run: |
        make
        mv "clip_share" "${{env.FILE_NAME}}"

    - name: Upload macOS binary
      uses: actions/upload-artifact@v4
      with:
        name: "${{env.FILE_NAME}}"
        path: "${{env.FILE_NAME}}"
        retention-days: 1
        if-no-files-found: error
        compression-level: 0

  macOS-all:
    needs: macOS
    runs-on: macos-latest
    timeout-minutes: 5

    steps:
    - name: Check out repository code
      uses: actions/checkout@v4

    - name: Set version
      run: |
        version="$(echo '${{github.ref_name}}' | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')"
        archive_name="clip_share_server-${version}-macos.zip"
        echo ARCHIVE_NAME="$archive_name" >> $GITHUB_ENV
        echo FILE_INTEL="clip_share-x86_64" >> $GITHUB_ENV
        echo FILE_ARM="clip_share-arm64" >> $GITHUB_ENV

    - name: Download macOS x86_64 version
      uses: actions/download-artifact@v4
      with:
        name: "${{env.FILE_INTEL}}"
        path: "${{env.FILE_INTEL}}"

    - name: Download macOS ARM64 version
      uses: actions/download-artifact@v4
      with:
        name: "${{env.FILE_ARM}}"
        path: "${{env.FILE_ARM}}"

    - name: Archive
      run: |
        mkdir dist
        mv "${{env.FILE_INTEL}}/${{env.FILE_INTEL}}" "${{env.FILE_ARM}}/${{env.FILE_ARM}}" dist/
        [ -f helper_tools/install-mac.sh ] && cp helper_tools/install-mac.sh dist/
        chmod +x dist/*
        cd dist
        rm -f .DS_Store
        zip -9 "../${{env.ARCHIVE_NAME}}" *

    - name: Upload macOS version
      uses: actions/upload-artifact@v4
      with:
        name: "${{env.ARCHIVE_NAME}}"
        path: "${{env.ARCHIVE_NAME}}"
        retention-days: 3
        if-no-files-found: error
        compression-level: 0

  Create-Release:
    needs:
    - Linux-x86_64
    - Linux-ARM64
    - Windows
    - macOS-all
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: write
      id-token: write
      attestations: write

    steps:
    - name: Check out repository code
      uses: actions/checkout@v4

    - name: Set variables
      run: |
        version="$(echo '${{github.ref_name}}' | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')"
        echo VERSION="$version" >> $GITHUB_ENV
        echo TAG="v${version}" >> $GITHUB_ENV
        echo TITLE="Version ${version}" >> $GITHUB_ENV
        echo FILE_LINUX_AMD64="clip_share_server-${version}-linux-x86_64.tar.gz" >> $GITHUB_ENV
        echo FILE_LINUX_ARM64="clip_share_server-${version}-linux-arm64.tar.gz" >> $GITHUB_ENV
        echo FILE_WINDOWS32="clip_share_server-${version}-windows-x86.zip" >> $GITHUB_ENV
        echo FILE_WINDOWS64="clip_share_server-${version}-windows-x86_64.zip" >> $GITHUB_ENV
        echo FILE_WINDOWS32_NO_SSL="clip_share_server-no_ssl-${version}-windows-x86.zip" >> $GITHUB_ENV
        echo FILE_WINDOWS64_NO_SSL="clip_share_server-no_ssl-${version}-windows-x86_64.zip" >> $GITHUB_ENV
        echo INSTALLER_WINDOWS="install-windows.bat" >> $GITHUB_ENV
        echo FILE_MACOS="clip_share_server-${version}-macos.zip" >> $GITHUB_ENV

    - name: Download builds
      uses: actions/download-artifact@v4
      with:
        pattern: clip_share_server-*
        path: ${{ github.workspace }}
        merge-multiple: true

    - name: Download Windows installer
      uses: actions/download-artifact@v4
      with:
        name: "${{env.INSTALLER_WINDOWS}}"
        path: "${{env.INSTALLER_WINDOWS}}"

    - name: Prepare assets
      run: |
        mkdir release
        mv "${{env.FILE_LINUX_AMD64}}" "${{env.FILE_LINUX_ARM64}}" "${{env.FILE_WINDOWS32}}" \
        "${{env.FILE_WINDOWS64}}" "${{env.FILE_WINDOWS32_NO_SSL}}" "${{env.FILE_WINDOWS64_NO_SSL}}" \
        "${{env.FILE_MACOS}}" release/
        mv "${{env.INSTALLER_WINDOWS}}/${{env.INSTALLER_WINDOWS}}" release/
        mv .github/workflows/resources/clipshare.conf release/
        mv helper_tools/install-online-linux-mac.sh release/install-linux-mac.sh
        cd release
        sed -i "s/^VERSION_DEFAULT=$/VERSION_DEFAULT=${{env.VERSION}}/" install-linux-mac.sh
        sed -i "s/^LINUX_AMD64_SHA=$/LINUX_AMD64_SHA='$(sha256sum -b ${{env.FILE_LINUX_AMD64}} | \
        cut -d ' ' -f 1)'/" install-linux-mac.sh
        sed -i "s/^LINUX_ARM64_SHA=$/LINUX_ARM64_SHA='$(sha256sum -b ${{env.FILE_LINUX_ARM64}} | \
        cut -d ' ' -f 1)'/" install-linux-mac.sh
        sed -i "s/^MAC_SHA=$/MAC_SHA='$(sha256sum -b ${{env.FILE_MACOS}} | cut -d ' ' -f 1)'/" install-linux-mac.sh
        sha256sum -b * >SHA2-256SUM

    - name: Generate artifact attestation
      uses: actions/attest-build-provenance@v2
      with:
        subject-path: "release/SHA2-256SUM"

    - name: Create release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        sed -i "s/<VERSION>/${{env.VERSION}}/g" .github/workflows/resources/release_notes.md
        sed -i "s/<FILE_LINUX_AMD64>/${{env.FILE_LINUX_AMD64}}/g" .github/workflows/resources/release_notes.md
        sed -i "s/<FILE_LINUX_ARM64>/${{env.FILE_LINUX_ARM64}}/g" .github/workflows/resources/release_notes.md
        sed -i "s/<FILE_MACOS>/${{env.FILE_MACOS}}/g" .github/workflows/resources/release_notes.md
        cd release
        gh release create "${{env.TAG}}" --latest --verify-tag \
        --notes-file ../.github/workflows/resources/release_notes.md \
        --title "${{env.TITLE}}" *
