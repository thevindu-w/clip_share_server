name: Build-and-Test
run-name: Build and Test on ${{ github.sha }}

on:
  push:
    branches:
    - master
    paths:
    - 'src/**'
    - '!src/res/**'
    - 'src/res/**/*.c'
    - 'src/res/**/*.h'
    - 'tests/**'
    - 'Makefile'
    - 'docker/*'
    - 'html/**'
    - '.github/workflows/build-test.yml'
  pull_request:
    branches:
    - master
  workflow_call:
    inputs:
      trigger:
        type: string
        required: false
        default: workflow_call

jobs:
  Style-Check:
    uses: ./.github/workflows/check-style.yml
    with:
      trigger: "${{ inputs.trigger || github.event_name }}"
    permissions:
      contents: write
      pull-requests: write

  Test-on-Linux-x86_64:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: Style-Check

    strategy:
      matrix:
        distro:
        - ubuntu
        - fedora
        - arch
        exclude:
        - distro: ${{ (github.event_name == 'push') && (inputs.trigger != 'workflow_call') && 'fedora' }}
        - distro: ${{ (github.event_name == 'push') && (inputs.trigger != 'workflow_call') && 'arch' }}

    steps:
    - name: Check out repository code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.ref }}

    - name: Build
      run: docker build -t clipshare -f docker/Dockerfile --build-arg "DISTRO=${{matrix.distro}}" .

    - name: Test
      run: docker run clipshare

  Test-on-Linux-ARM64:
    runs-on: ubuntu-24.04-arm
    if: ${{ (github.event_name != 'push') || (inputs.trigger == 'workflow_call') }}
    timeout-minutes: 10
    needs: Style-Check

    steps:
    - name: Check out repository code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.ref }}

    - name: Build
      run: docker build -t clipshare -f docker/Dockerfile --build-arg "DISTRO=debian" .

    - name: Test
      run: docker run clipshare

  Test-on-Windows:
    runs-on: windows-latest
    timeout-minutes: 15
    needs: Style-Check

    strategy:
      matrix:
        target:
        - arch: x86_64
          env: clang-x86_64
          sys: CLANG64
        - arch: x86
          env: i686
          sys: MINGW32
        event:
        - ${{ inputs.trigger || github.event_name }}
        exclude:
        - {event: push, target: {arch: x86, env: i686, sys: MINGW32}}

    defaults:
      run:
        shell: msys2 {0}

    steps:
    - name: Prepare packages list
      id: prepare-msys2
      shell: bash
      run: |
        install_list=" \
          mingw-w64-${{matrix.target.env}}-libpng \
          mingw-w64-${{matrix.target.env}}-libunistring \
          make \
          python \
          findutils \
          diffutils \
          coreutils \
          socat \
          sed"
        if [ "${{ matrix.target.arch }}" = 'x86_64' ]; then
          install_list="mingw-w64-${{matrix.target.env}}-clang \
          ${install_list}"
        else
          install_list="mingw-w64-${{matrix.target.env}}-gcc \
          mingw-w64-${{matrix.target.env}}-openssl \
          ${install_list}"
        fi
        echo "install_list=$install_list" >> $GITHUB_OUTPUT

    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: ${{matrix.target.sys}}
        update: false
        install: ${{ steps.prepare-msys2.outputs.install_list }}

    - name: Set OpenSSL path
      if: ${{ matrix.target.arch == 'x86_64' }}
      run: |
        OPENSSL_PATH=/c/msys64/openssl-x86_64
        echo OPENSSL_PATH="$OPENSSL_PATH" >> "$GITHUB_ENV"
        echo CPATH="${OPENSSL_PATH}/include" >> "$GITHUB_ENV"
        echo LIBRARY_PATH="${OPENSSL_PATH}/lib64" >> "$GITHUB_ENV"

    - name: Setup OpenSSL
      if: ${{ matrix.target.arch == 'x86_64' }}
      id: cache-openssl
      uses: actions/cache@v4
      with:
        path: C:\msys64\openssl-x86_64
        key: openssl-windows-x86_64

    - name: Build OpenSSL
      if: ${{ (matrix.target.arch == 'x86_64') && (steps.cache-openssl.outputs.cache-hit != 'true') }}
      run: |
        curl -OL https://github.com/openssl/openssl/releases/download/openssl-3.5.0/openssl-3.5.0.tar.gz
        if [ "$(sha256sum -b openssl-3.5.0.tar.gz | cut -d ' ' -f 1)" != \
            '344d0a79f1a9b08029b0744e2cc401a43f9c90acd1044d09a530b4885a8e9fc0' ]; then
          echo OpenSSL hash mismatch
          exit 1
        fi
        tar -xzf openssl-3.5.0.tar.gz
        mkdir "$OPENSSL_PATH"
        cd openssl-3.5.0
        CC=clang ./Configure zlib no-zlib-dynamic no-brotli no-zstd no-shared no-tests no-docs \
        --prefix="$OPENSSL_PATH" mingw64
        make -j4
        make install
        cd ..
        rm -rf openssl-3.5.0*

    - name: Check out repository code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.ref }}

    - name: Build
      run: |
        if [ -n "$OPENSSL_PATH" ] && [ -d "$OPENSSL_PATH" ]; then
          export PATH="${OPENSSL_PATH}/bin:${PATH}"
        fi
        make ARCH=${{matrix.target.arch}}
        make ARCH=${{matrix.target.arch}} no_ssl

    - name: Test
      run: |
        if [ -n "$OPENSSL_PATH" ] && [ -d "$OPENSSL_PATH" ]; then
          export PATH="${OPENSSL_PATH}/bin:${PATH}"
        fi
        make ARCH=${{matrix.target.arch}} test

  Test-on-macOS:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    needs: Style-Check

    strategy:
      matrix:
        os:
        - macos-latest
        - macos-13
        exclude:
        - os: ${{ (github.event_name == 'push') && (inputs.trigger != 'workflow_call') && 'macos-13' }}

    steps:
    - name: Install build dependencies
      run: brew install openssl@3 libpng libunistring

    - name: Check out repository code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.ref }}

    - name: Build
      run: |
        make
        make no_ssl

    - name: Install test dependencies
      run: |
        brew install coreutils socat gnu-sed
        echo "$(brew --prefix coreutils)"'/libexec/gnubin' >> $GITHUB_PATH
        echo "$(brew --prefix gnu-sed)"'/libexec/gnubin' >> $GITHUB_PATH

    - name: Test
      run: |
        export TERM=xterm-256color
        make test

  CodeQL-Analyze:
    runs-on: ubuntu-latest
    if: ${{ (github.event_name != 'push') || (inputs.trigger == 'workflow_call') }}
    timeout-minutes: 30
    needs:
    - Test-on-Linux-x86_64
    - Test-on-Linux-ARM64
    - Test-on-macOS

    permissions:
      security-events: write

    steps:
    - name: Install build dependencies
      run: |
        echo "set man-db/auto-update false" | sudo debconf-communicate && sudo dpkg-reconfigure man-db -f noninteractive
        sudo apt-get update
        sudo apt-get install --no-install-recommends -y apt-transport-https
        sudo apt-get install --no-install-recommends -y coreutils gcc make \
        libc6-dev libx11-dev libxmu-dev libxcb-randr0-dev libpng-dev libssl-dev libunistring-dev

    - name: Check out repository code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.ref }}

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: 'c-cpp'
        trap-caching: false

    - name: Build using make
      run: make

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:c-cpp"
